[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core >=3.2,<4"]

[project]
authors = [
  { name = "Chris Jones", email = "chris@brack3t.com" },
  { name = "Kenneth Love", email = "kenneth@brack3t.com" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Development Status :: 6 - Mature",
  "Environment :: Web Environment",
  "Framework :: Django :: 3.2",
  "Framework :: Django :: 4.2",
  "Framework :: Django",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = ["flit"]
dynamic = ["description", "version"]
keywords = ["django", "forms", "mixins", "views"]
license = { file = "LICENSE.txt" }
name = "django-braces"
readme = "README.md"
requires-python = ">=3.8"

[project.urls]
documentation = "https://django-braces.readthedocs.io/en/latest/"
repository = "https://github.com/brack3t/django-braces"

[project.optional-dependencies]
checks = [
  "black",
  "django-stubs[compatible-mypy]",
  "djangorestframework-stubs[compatible-mypy]",
  "interrogate",
  "mypy",
  "ruff",
]
dev = ["django", "django-rest-framework"]
documentation = ["releases", "semantic-version", "sphinx"]
testing = [
  "coverage",
  "pytest",
  "pytest-cov",
  "pytest-django",
  "pytest-reverse",
]

# Tool configuration

[tool.black]
line-length = 88

[tool.coverage.report]
exclude_lines = [
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
  "if settings.DEBUG:",
  "if settings.LOCAL:",
  "if settings.PRODUCTION:",
  "if settings.STAGING:",
  "if settings.TESTING:",
  "pragma: no cover",
  "raise NotImplementedError",
]
fail_under = 95
ignore_errors = true
omit = [
  "build/*",
  "conftest.py",
  "dist/*",
  "docs/*",
  "setup.py",
  "tests/*",
  "venv/*",
]
show_missing = true

[tool.coverage.run]
branch = true
source = ["braces"]

[tool.django-stubs]
django_settings_module = "tests.project.settings"

[tool.flit.module]
name = "braces"

[tool.interrogate]
exclude = ["build", "conftest.py", "docs", "setup.py"]
fail-under = 75
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-module = true
ignore-nested-classes = true
ignore-nested-functions = false
ignore-private = false
ignore-property-decorators = false
ignore-regex = ["^get$", "^mock_.*"]
ignore-semiprivate = false
# possible values: 0 (minimal output), 1 (-v), 2 (-vv)
color = true
omit-covered-files = true
quiet = false
verbose = 1


[tool.mypy]
check_untyped_defs = false
color_output = true
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
error_summary = true
exclude = ["build", "dist", "docs", "tests", "venv"]
implicit_optional = true
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]
pretty = true
show_column_numbers = true
show_error_context = true
strict = true
warn_redundant_casts = true

[tool.pytest.ini_options]
# ini_options
DJANGO_SETTINGS_MODULE = "tests.project.settings"
addopts = "--cov --no-cov-on-fail --nomigrations --reverse -c pyproject.toml"
django_find_project = false
markers = ["mixin", "mixin_view_factory"]
norecursedirs = [".git", "__pycache__", "docs"]
pythonpath = [".", "src", "tests.project"]                                    #, "src.braces"]
testpaths = ["tests"]

[tool.ruff]
select = [
  "ANN", # flake8-annotations
  "B",   # flake8-bugbear
  "BLE", # flake8-blind-except
  "COM", # flake8-commas
  "D",   # pydocstyle
  "DJ",  # flake8-django
  "E",   # pycodestyle
  "EM",  # flake8-errmsg
  "ERA", # flake8-eradicate
  "F",   # Pyflakes
  "FBT", # flake8-boolean-trap
  "G",   # flake8-logging-format
  "I",   # isort
  "INP", # flake8-no-pep420
  "N",   # pep8-naming
  "PIE", # flake8-pie
  "PT",  # flake8-pytest
  "PYI", # flake8-pyi
  "Q",   # flake8-quotes
  "RET", # flake8-return
  "RSE", # flake8-raises
  "RUF", # ruff-specific rules
  "S",   # flake8-bandit
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TRY", # tryceratops
]

# ignore
ignore = ["ANN101", "F403"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
  "ANN",
  "B",
  "BLE",
  "COM",
  "D",
  "DJ",
  "E",
  "EM",
  "ERA",
  "F",
  "FBT",
  "G",
  "I",
  "INP",
  "N",
  "PIE",
  "PT",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "T20",
  "TCH",
  "TRY",
]

unfixable = []

extend-exclude = ["docs"]
ignore-init-module-imports = true

# Assume Python 3.8.
src = ["src", "tests"]
target-version = "py38"

# format = "json"
format = "pylint"

[tool.ruff.per-file-ignores]
"tests/test_*.py" = [
  "ANN001", # Missing type annotation for function argument
  "ANN201", # Missing type annotation for self in method
  "FBT001", # Positional Boolean
  "S101",   # Missing return type annotation
]

[tool.ruff.isort]
combine-as-imports = true
known-third-party = ["django", "rest_framework"]
split-on-trailing-comma = true

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.tbump]
github_url = "https://github.com/brack3t/django-braces/"

[tool.tbump.version]
current = "2.0.0"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "braces/__init__.py"

[[tool.tbump.before_commit]]
cmd = "grep -q {new_version} docs/changelog.rst"
name = "check changelog"
