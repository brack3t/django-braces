[build-system]
requires = ["setuptools>=40.6.6", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "django-braces"
version = "2.0.0"
authors = [
    {name="Kenneth Love", email="kenneth@bracket.com"},
    {name="Chris Jones", email="chris@bracket.com"},
]
description = "Reusable, generic mixins for Django"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Development Status :: 6 - Mature",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "Django>=3.2",
]
keywords = ["django", "view", "forms", "mixins"]

[project.urls]
documentation = "https://django-braces.readthedocs.io/en/latest/"
repo = "https://github.com/brack3t/django-braces"

[project.optional-dependencies]
documentation = [
    "sphinx",
    "releases",
    "semantic-version",
]
dev = [
    "black",
    "django",
    "django-rest-framework",
    "django-stubs[compatible-mypy]",
    "djangorestframework-stubs[compatible-mypy]",
    "flake8",
    "future_typing",
    "interrogate",
    "isort",
]
testing = [
    "pytest",
    "pytest-cov",
    "pytest-django",
    "mypy",
]

[project.license]
file = "LICENSE.txt"

[tool.black]
line-length = 79

[tool.isort]
profile = "black"

[tool.flake8]
extend-exclude = ["venv", "build", "dist", "docs"]
extend-ignore = ["F403",]
format = "pylint"
hang-closing = true
require-plugins = []

[tool.pytest.ini_options]
addopts = "--cov --nomigrations"

[tool.coverage.run]
branch = true
source = ["braces"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "if settings.DEBUG:",
    "if settings.TESTING:",
    "if settings.PRODUCTION:",
    "if settings.STAGING:",
    "if settings.LOCAL:",
]
ignore_errors = true
omit = ["tests/*", "venv/*", "build/*", "dist/*", "docs/*", "setup.py", "conftest.py"]
show_missing = true
fail_under = 95

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
fail-under = 75
exclude = ["setup.py", "conftest.py", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*"]
# possible values: 0 (minimal output), 1 (-v), 2 (-vv)
verbose = 1
quiet = false
color = true
omit-covered-files = true

[tool.mypy]
color_output = true
error_summary = true
exclude = ["venv", "build", "dist", "docs", "tests"]
implicit_optional = true
pretty = true
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]
show_error_context = true
show_column_numbers = true

[tool.django-stubs]
django_settings_module = "tests.project.settings"
[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "2.0.0"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "..."

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[tool.tbump.before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
